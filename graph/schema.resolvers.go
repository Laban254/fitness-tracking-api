package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fitness-tracking-api/graph/model"
	"fmt"
	"fitness-tracking-api/models" 
	"fitness-tracking-api/database" 
	"golang.org/x/crypto/bcrypt"
)

// CreateUser
func (r *mutationResolver) CreateUser(ctx context.Context, email string, password string) (*model.User, error) {
    if email == "" || password == "" {
        return nil, fmt.Errorf("email and password must not be empty")
    }

    var existingUser models.User
    if err := database.DB.Where("email = ?", email).First(&existingUser).Error; err == nil {
        return nil, fmt.Errorf("user with email %s already exists", email)
    }

    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
    if err != nil {
        return nil, fmt.Errorf("failed to hash password: %w", err)
    }

    newUser := models.User{
        Email:    email,
        Password: string(hashedPassword), 
    }

    if err := database.DB.Create(&newUser).Error; err != nil {
        return nil, fmt.Errorf("failed to create user: %w", err)
    }

    return &model.User{
        ID:            fmt.Sprintf("%d", newUser.ID),
        Email:         newUser.Email,
        Profile:       nil,
        Workouts:      nil,
        NutritionLogs: nil,
        Progress:      nil,
    }, nil
}


// UpdateUser 
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, fitnessGoals []string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// LogWorkout 
func (r *mutationResolver) LogWorkout(ctx context.Context, userID string, typeArg string, duration int, caloriesBurned int) (*model.Workout, error) {
	panic(fmt.Errorf("not implemented: LogWorkout - logWorkout"))
}

// DeleteWorkout 
func (r *mutationResolver) DeleteWorkout(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWorkout - deleteWorkout"))
}

// LogNutrition
func (r *mutationResolver) LogNutrition(ctx context.Context, userID string, meal string, calories int) (*model.Nutrition, error) {
	panic(fmt.Errorf("not implemented: LogNutrition - logNutrition"))
}

// UpdateNutrition 
func (r *mutationResolver) UpdateNutrition(ctx context.Context, id string, meal *string, calories *int) (*model.Nutrition, error) {
	panic(fmt.Errorf("not implemented: UpdateNutrition - updateNutrition"))
}

// LogProgress 
func (r *mutationResolver) LogProgress(ctx context.Context, userID string, weight float64, measurements string) (*model.Progress, error) {
	panic(fmt.Errorf("not implemented: LogProgress - logProgress"))
}

// AddFriend 
func (r *mutationResolver) AddFriend(ctx context.Context, userID string, friendID string) (bool, error) {
	panic(fmt.Errorf("not implemented: AddFriend - addFriend"))
}

// User
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users 
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Workouts 
func (r *queryResolver) Workouts(ctx context.Context, userID string) ([]*model.Workout, error) {
	panic(fmt.Errorf("not implemented: Workouts - workouts"))
}

// Workout 
func (r *queryResolver) Workout(ctx context.Context, id string) (*model.Workout, error) {
	panic(fmt.Errorf("not implemented: Workout - workout"))
}

// Nutrition 
func (r *queryResolver) Nutrition(ctx context.Context, userID string) ([]*model.Nutrition, error) {
	panic(fmt.Errorf("not implemented: Nutrition - nutrition"))
}

// Progress
func (r *queryResolver) Progress(ctx context.Context, userID string) ([]*model.Progress, error) {
	panic(fmt.Errorf("not implemented: Progress - progress"))
}

// WorkoutPlans 
func (r *queryResolver) WorkoutPlans(ctx context.Context, userID string) ([]*model.WorkoutPlan, error) {
	panic(fmt.Errorf("not implemented: WorkoutPlans - workoutPlans"))
}

// Friends 
func (r *queryResolver) Friends(ctx context.Context, userID string) ([]*model.Friend, error) {
	panic(fmt.Errorf("not implemented: Friends - friends"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
